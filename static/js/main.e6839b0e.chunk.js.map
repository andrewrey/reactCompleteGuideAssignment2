{"version":3,"sources":["Components/Input/index.js","Components/Header/index.js","Components/Validation/index.js","Components/CharComponent/index.js","Components/CharWrap/index.js","Components/Footer/index.js","Components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Input","textInput","inputHandler","className","type","placeholder","onChange","value","Header","input","textInputHandler","output","length","Validation","CharComponent","letter","removechar","onClick","CharWrap","splitWord","map","Footer","Main","App","state","e","text","target","setState","prevState","wordSplitter","split","removeLetterHandler","char","filter","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOAUeA,G,MARD,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC1B,OACE,yBAAKC,UAAU,aACb,2BAAOC,KAAK,OAAOC,YAAY,gBAAgBC,SAAUJ,EAAcK,MAAON,OC8BrEO,EAhCA,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBACnBC,EAAS,KAUb,OATIF,EAAMG,OAAS,IACjBD,EACE,yBAAKR,UAAU,qBACb,uBAAGA,UAAU,gBAAb,iBACA,uBAAGA,UAAU,iBAAiBM,EAAMG,UAMxC,gCACE,yBAAKT,UAAU,iBACb,wBAAIA,UAAU,UACZ,6BACA,6BACA,6BACA,6BACA,6BACA,+BAGJ,yBAAKA,UAAU,kBACb,4CACA,kBAAC,EAAD,CAAOF,UAAWQ,EAAOP,aAAcQ,IACtCC,KCnBME,EARI,SAAC,GAAe,IAAbJ,EAAY,EAAZA,MAChBE,EAAS,KAIb,OAHIF,EAAMG,OAAS,GAAKH,EAAMG,OAAS,IACrCD,EAAS,gEAEJ,yBAAKR,UAAU,cAAcQ,ICGvBG,EARO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAC/B,OACE,yBAAKb,UAAU,aAAac,QAASD,GACnC,2BAAID,KCMKG,EARE,SAAC,GAAsC,IAApCT,EAAmC,EAAnCA,MAAOU,EAA4B,EAA5BA,UAAWH,EAAiB,EAAjBA,WAChCL,EAAS,KAIb,OAHIF,EAAMG,OAAS,IACjBD,EAASQ,EAAUC,KAAI,SAACL,GAAD,OAAY,kBAAC,EAAD,CAAeA,OAAQA,EAAQC,WAAY,kBAAMA,EAAWD,UAE1F,6BAASZ,UAAU,YAAYQ,ICEzBU,EARA,WACb,OACE,gCACE,yDCUSC,EAVF,SAAC,GAAsC,IAApCb,EAAmC,EAAnCA,MAAOU,EAA4B,EAA5BA,UAAWH,EAAiB,EAAjBA,WAChC,OACE,8BACE,kBAAC,EAAD,CAAYP,MAAOA,IACnB,kBAAC,EAAD,CAAUU,UAAWA,EAAWV,MAAOA,EAAOO,WAAYA,IAC1D,kBAAC,EAAD,QCiCSO,E,4MArCbC,MAAQ,CACNf,MAAO,GACPU,UAAW,I,EAGbT,iBAAmB,SAACe,GAClB,IAAIC,EAAOD,EAAEE,OAAOpB,MACpB,EAAKqB,UAAS,SAACC,GACb,MAAO,CACLpB,MAAOiB,EACPP,UAAW,EAAKW,aAAaJ,Q,EAInCI,aAAe,SAACJ,GAEd,OADgBA,EAAKK,MAAM,K,EAG7BC,oBAAsB,SAACC,GAErB,EAAKL,UAAS,SAACC,GACb,MAAO,CACLV,UAAWU,EAAUV,UAAUe,QAAO,SAACnB,GAAD,OAAYA,IAAWkB,SAGjEE,QAAQC,IAAIH,I,uDAGZ,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,CAAQM,MAAO4B,KAAKb,MAAMf,MAAOC,iBAAkB2B,KAAK3B,mBACxD,kBAAC,EAAD,CAAMD,MAAO4B,KAAKb,MAAMf,MAAOU,UAAWkB,KAAKb,MAAML,UAAWH,WAAYqB,KAAKL,2B,GAhCvEM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.e6839b0e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Input = ({ textInput, inputHandler }) => {\n  return (\n    <div className=\"inputWrap\">\n      <input type=\"text\" placeholder=\"Enter Word...\" onChange={inputHandler} value={textInput} />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport Input from \"../Input\";\n\nconst Header = ({ input, textInputHandler }) => {\n  let output = null;\n  if (input.length > 0) {\n    output = (\n      <div className=\"length-outputWrap\">\n        <p className=\"length-label\">Value Length:</p>\n        <p className=\"length-output\">{input.length}</p>\n      </div>\n    );\n  }\n\n  return (\n    <header>\n      <div className=\"animationArea\">\n        <ul className=\"blocks\">\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n          <li></li>\n        </ul>\n      </div>\n      <div className=\"contentWrapper\">\n        <h1>Assignment 2</h1>\n        <Input textInput={input} inputHandler={textInputHandler} />\n        {output}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Validation = ({ input }) => {\n  let output = null;\n  if (input.length < 5 && input.length > 0) {\n    output = <p>Too short, minimum 5 letter word</p>;\n  }\n  return <div className=\"validation\">{output}</div>;\n};\n\nexport default Validation;\n","import React from \"react\";\n\nconst CharComponent = ({ letter, removechar }) => {\n  return (\n    <div className=\"letterWrap\" onClick={removechar}>\n      <p>{letter}</p>\n    </div>\n  );\n};\n\nexport default CharComponent;\n","import React from \"react\";\nimport CharComponent from \"../CharComponent\";\n\nconst CharWrap = ({ input, splitWord, removechar }) => {\n  let output = null;\n  if (input.length > 4) {\n    output = splitWord.map((letter) => <CharComponent letter={letter} removechar={() => removechar(letter)} />);\n  }\n  return <section className=\"charWrap\">{output}</section>;\n};\n\nexport default CharWrap;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>Made by Andrew &copy; 2020</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Validation from \"../Validation\";\nimport CharWrap from \"../CharWrap\";\nimport Footer from \"../Footer\";\n\nconst Main = ({ input, splitWord, removechar }) => {\n  return (\n    <main>\n      <Validation input={input} />\n      <CharWrap splitWord={splitWord} input={input} removechar={removechar} />\n      <Footer />\n    </main>\n  );\n};\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Header from \"./Components/Header\";\nimport Main from \"./Components/Main\";\n\nclass App extends Component {\n  state = {\n    input: \"\",\n    splitWord: [],\n  };\n\n  textInputHandler = (e) => {\n    let text = e.target.value;\n    this.setState((prevState) => {\n      return {\n        input: text,\n        splitWord: this.wordSplitter(text),\n      };\n    });\n  };\n  wordSplitter = (text) => {\n    let wordArray = text.split(\"\");\n    return wordArray;\n  };\n  removeLetterHandler = (char) => {\n    // this.setState((prevState) => ({ splitWord: prevState.splitWord.filter((letter) => letter !== char) }));\n    this.setState((prevState) => {\n      return {\n        splitWord: prevState.splitWord.filter((letter) => letter !== char),\n      };\n    });\n    console.log(char);\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Header input={this.state.input} textInputHandler={this.textInputHandler} />\n        <Main input={this.state.input} splitWord={this.state.splitWord} removechar={this.removeLetterHandler} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}